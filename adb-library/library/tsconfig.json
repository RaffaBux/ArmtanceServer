{
    "compilerOptions": {
        /*******************************************************************************************
         *
         * Projects
         *
         ******************************************************************************************/
        // Save .tsbuildinfo files to allow for incremental compilation of projects.
        "incremental": true,
        // Enable constraints that allow a TypeScript project to be used with project references.
        "composite": true,
        // Specify the path to .tsbuildinfo incremental compilation file.
        "tsBuildInfoFile": "./build/.tsbuildinfo",
        // Disable preferring source files instead of declaration files when referencing composite
        // projects.
        "disableSourceOfProjectReferenceRedirect": true,
        // Opt a project out of multi-project reference checking when editing.
        "disableSolutionSearching": true,
        // Reduce the number of projects loaded automatically by TypeScript.
        "disableReferencedProjectLoad": true,
        /******************************************************************************************/
        
        /*******************************************************************************************
         *
         * Language and Environment
         *
         ******************************************************************************************/
        // Set the JavaScript language version for emitted JavaScript and include compatible library
        // declarations.
        "target": "ES2022",
        // Specify a set of bundled library declaration files that describe the target runtime
        // environment.
        "lib": [
            "ES2022"
        ],
        // Specify what JSX code is generated.
        "jsx": "preserve",
        // Enable experimental support for legacy experimental decorators.
        "experimentalDecorators": true,
        // Emit design-type metadata for decorated declarations in source files.
        "emitDecoratorMetadata": true,
        // Including any library files (e.g., the default lib.d.ts).
        "noLib": false,
        // Emit ECMAScript-standard-compliant class fields.
        "useDefineForClassFields": true,
        // Control what method is used to detect module-format JS files.
        "moduleDetection": "force",
        /******************************************************************************************/
        
        /*******************************************************************************************
         *
         * Modules
         *
         ******************************************************************************************/
        // Specify what module code is generated.
        "module": "commonjs",
        // Specify the root folder within your source files.
        "rootDirs": [
            "./src"
        ],
        // Specify how TypeScript looks up a file from a given module specifier.
        "moduleResolution": "node",
        // Specify multiple folders that act like './node_modules/@types'.
        "typeRoots": [
            "./types"
        ],
        // Disallow accessing UMD globals from modules.
        "allowUmdGlobalAccess": false,
        // Disallow imports to include TypeScript file extensions.
        "allowImportingTsExtensions": false,
        // Do not use the package.json 'exports' field when resolving package imports.
        "resolvePackageJsonExports": false,
        // Do not use the package.json 'imports' field when resolving imports.
        "resolvePackageJsonImports": false,
        // Disable importing .json files.
        "resolveJsonModule": false,
        // Disable importing files with any extension, provided a declaration file is present.
        "allowArbitraryExtensions": false,
        // Set the base directory to resolve non-relative module names.
        "baseUrl": "./src",
        // Set a shorthand to reference the JSON-LD contexts
        "paths": {
            "context/*": ["../context/*"],
            "contract/*": ["../contract/build/src/contracts/*"]
        },
        /******************************************************************************************/
        
        /*******************************************************************************************
         *
         * JavaScript Support
         *
         ******************************************************************************************/
        // Disallow JavaScript files to be a part of your program.
        "allowJs": false,
        /******************************************************************************************/
        
        /*******************************************************************************************
         *
         * Emit
         *
         ******************************************************************************************/
        // Generate declarations
        "declaration": true,
        // Create sourcemaps for d.ts files.
        "declarationMap": true,
        // Do not only output d.ts files and not JavaScript files.
        "emitDeclarationOnly": false,
        // Do not create source map files for emitted JavaScript files.
        "sourceMap": true,
        // Do not include sourcemap files inside the emitted JavaScript.
        // Specify an output folder for all emitted files.
        "outDir": "./build",
        // Enable emitting comments.
        "removeComments": false,
        // Allow importing helper functions from tslib once per project,
        // instead of including them per-file.
        "importHelpers": true,
        // Specify emit/checking behavior for imports that are only used for types.
        "importsNotUsedAsValues": "remove",
        // Do not emit more compliant, but verbose and less performant JavaScript for iteration.
        "downlevelIteration": false,
        // Do not include source code in the sourcemaps inside the emitted JavaScript.
        "inlineSources": false,
        // Do not emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.
        "emitBOM": false,
        // Set the newline character for emitting files.
        "newLine": "lf",
        // Disable emitting declarations that have '@internal' in their JSDoc comments.
        "stripInternal": true,
        // Disable generating custom helper functions like '__extends' in compiled output.
        "noEmitHelpers": true,
        // Disable emitting files if any type checking errors are reported.
        "noEmitOnError": true,
        // Disable erasing 'const enum' declarations in generated code.
        "preserveConstEnums": true,
        /******************************************************************************************/
        
        /*******************************************************************************************
         *
         * Interop Constraints
         *
         ******************************************************************************************/
        // Ensure that each file can be safely transpiled without relying on other imports.
        "isolatedModules": true,
        // Transform or elide any imports or exports not marked as type-only, ensuring they
        // are not written in the output file's format based on the 'module' setting.
        "verbatimModuleSyntax": false,
        // Allow 'import x from y' when a module doesn't have a default export.
        "allowSyntheticDefaultImports": true,
        // Emit additional JavaScript to ease support for importing CommonJS modules. This enables
        // 'allowSyntheticDefaultImports' for type compatibility.
        "esModuleInterop": true,
        // Disable resolving symlinks to their realpath. This correlates to the same flag in node.
        "preserveSymlinks": true,
        // Ensure that casing is correct in imports.
        "forceConsistentCasingInFileNames": true,
        /******************************************************************************************/
        
        /*******************************************************************************************
         *
         * Type Checking
         *
         ******************************************************************************************/
        // Enable all strict type-checking options.
        "strict": true,
        // Enable error reporting for expressions and declarations with an implied 'any' type.
        "noImplicitAny": true,
        // When type checking, take into account 'null' and 'undefined'.
        "strictNullChecks": true,
        // When assigning functions, check to ensure parameters and the return values are
        // subtype-compatible.
        "strictFunctionTypes": true,
        // Check that the arguments for 'bind', 'call', and 'apply' methods match the original
        // function.
        "strictBindCallApply": true,
        // Check for class properties that are declared but not set in the constructor.
        "strictPropertyInitialization": true,
        // Enable error reporting when 'this' is given the type 'any'.
        "noImplicitThis": true,
        // Default catch clause variables as 'unknown' instead of 'any'.
        "useUnknownInCatchVariables": true,
        // Ensure 'use strict' is never emitted.
        "alwaysStrict": false,
        // Disable error reporting when local variables aren't read.
        "noUnusedLocals": false,
        // Disable raising an error when a function parameter isn't read.
        "noUnusedParameters": false,
        // Interpret optional property types as written, rather than adding 'undefined'.
        "exactOptionalPropertyTypes": true,
        // Enable error reporting for codepaths that do not explicitly return in a function.
        "noImplicitReturns": true,
        // Enable error reporting for fallthrough cases in switch statements.
        "noFallthroughCasesInSwitch": true,
        // Add 'undefined' to a type when accessed using an index.
        "noUncheckedIndexedAccess": true,
        // Ensure overriding members in derived classes are marked with an override modifier.
        "noImplicitOverride": true,
        // Enforces using indexed accessors for keys declared using an indexed type.
        "noPropertyAccessFromIndexSignature": true,
        // Enable error reporting for unused labels.
        "allowUnusedLabels": false,
        // Enable error reporting for unreachable code.
        "allowUnreachableCode": false,
        /******************************************************************************************/
        
        /*******************************************************************************************
         *
         * Output Formatting
         *
         ******************************************************************************************/
        // Disable truncating types in error messages.
        "noErrorTruncation": true,
        // Pretty print the error messages
        "pretty": true,
        /******************************************************************************************/
        
        /*******************************************************************************************
         *
         * Completeness
         *
         ******************************************************************************************/
        // Skip type checking .d.ts files that are included with TypeScript.
        "skipDefaultLibCheck": true,
        // Skip type checking all .d.ts files.
        "skipLibCheck": true
        /******************************************************************************************/
    }
}
